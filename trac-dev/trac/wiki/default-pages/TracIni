= The Trac Configuration File =
[[TracGuideToc]]

Trac configuration is done by editing the '''`trac.ini`''' config file, located in `<projectenv>/conf/trac.ini`.  Changes to the configuration are usually reflected immediately, though changes to the `[components]` or `[logging]` sections will require restarting the web server. You may also need to restart the web server after creating a global configuration file when none was previously present.

The `trac.ini` configuration file should be writable by the web server, as Trac currently relies on the possibility to trigger a complete environment reload to flush its caches.

== Global Configuration ==

In versions prior to 0.11, the global configuration was by default located in `$prefix/share/trac/conf/trac.ini` or /etc/trac/trac.ini, depending on the distribution. If you're upgrading, you may want to specify that file to inherit from.  Literally, when you're upgrading to 0.11, you have to add an `[inherit]` section to your project's `trac.ini` file. Additionally, you have to move your customized templates and common images from `$prefix/share/trac/...` to the new location.

Global options will be merged with the environment-specific options, where local options override global options. The options file is specified as follows:
{{{
[inherit]
file = /usr/share/trac/conf/trac.ini
}}}

Note that you can also specify a global option file when creating a new project,  by adding the option `--inherit=/path/to/global/options` to [TracAdmin trac-admin]'s `initenv` command.  If do not do this but nevertheless intend to use a global option file with your new environment, you will have to go through the newly generated conf/trac.ini file and delete the entries that will otherwise override those set in the global file.


== Reference ==

This is a brief reference of available configuration options.

 ''Note that the [bitten], [spam-filter] and [vote] sections below are added by plugins enabled on this Trac, and therefore won't be part of a default installation.''

[[TracIni()]]


== [components] == #components-section
This section is used to enable or disable components provided by plugins, as well as by Trac itself. The component to enable/disable is specified via the name of the option. Whether its enabled is determined by the option value; setting the value to `enabled` or `on` will enable the component, any other value (typically `disabled` or `off`) will disable the component.

The option name is either the fully qualified name of the components or the module/package prefix of the component. The former enables/disables a specific component, while the latter enables/disables any component in the specified package/module.

Consider the following configuration snippet:
{{{
[components]
trac.ticket.report.ReportModule = disabled
webadmin.* = enabled
}}}

The first option tells Trac to disable the [wiki:TracReports report module]. The second option instructs Trac to enable all components in the `webadmin` package. Note that the trailing wildcard is required for module/package matching.

See the ''Plugins'' page on ''About Trac'' to get the list of active components (requires `CONFIG_VIEW` [wiki:TracPermissions permissions].)

See also: TracPlugins

== [ticket-custom] == #ticket-custom-section

In this section, you can define additional fields for tickets. See TracTicketsCustomFields for more details.

== [ticket-workflow] == #ticket-workflow-section
''(since 0.11)''

The workflow for tickets is controlled by plugins. 
By default, there's only a `ConfigurableTicketWorkflow` component in charge. 
That component allows the workflow to be configured via this section in the trac.ini file.
See TracWorkflow for more details.

== [milestone-groups] == #milestone-groups-section
''(since 0.11)''

As the workflow for tickets is now configurable, there can be many ticket states,
and simply displaying closed tickets vs. all the others is maybe not appropriate 
in all cases. This section enables one to easily create ''groups'' of states 
that will be shown in different colors in the milestone progress bar.

Example configuration (the default only has closed and active):
{{{
closed = closed
# sequence number in the progress bar
closed.order = 0
# optional extra param for the query (two additional columns: created and modified and sort on created)
group=resolution,order=time,col=id,col=summary,col=owner,col=type,col=priority,col=component,col=severity,col=time,col=changetime
# indicates groups that count for overall completion 
closed.overall_completion = truepercentage

new = new
new.order = 1
new.css_class = new
new.label = new

# one catch-all group is allowed
active = *
active.order = 2
# CSS class for this interval
active.css_class = open
# Displayed label for this group
active.label = in progress
}}}

The definition consists in a comma-separated list of accepted status.
Also, '*' means any status and could be used to associate all remaining
states to one catch-all group.

The CSS class can be one of: new (yellow), open (no color) or
closed (green). New styles can easily be added using the following
selector:  `table.progress td.<class>`

== [svn:externals] == #svn:externals-section
''(since 0.11)''

The TracBrowser for Subversion can interpret the `svn:externals` property of folders out of the box.
However, if those externals are ''not'' using the `http:` or `https:` protocol, or if a link to a different repository browser such as another Trac or [http://www.viewvc.org/ ViewVC] is desired, then Trac needs to be able to map an external prefix to this other URL.

This mapping is done in the `[svn:externals]` section of the TracIni

Example:
{{{
[svn:externals]
1 = svn://server/repos1 http://trac/proj1/browser/$path?rev=$rev
2 = svn://server/repos2 http://trac/proj2/browser/$path?rev=$rev
3 = http://theirserver.org/svn/eng-soft       http://ourserver/viewvc/svn/$path/?pathrev=25914
4 = svn://anotherserver.com/tools_repository  http://ourserver/tracs/tools/browser/$path?rev=$rev
}}}
With the above, the `svn://anotherserver.com/tools_repository/tags/1.1/tools` external will be mapped to `http://ourserver/tracs/tools/browser/tags/1.1/tools?rev=` (and `rev` will be set to the appropriate revision number if the external additionally specifies a revision, see the [http://svnbook.red-bean.com/en/1.4/svn.advanced.externals.html SVN Book on externals] for more details).

Note that the number used as a key in the above section is purely used as a place holder, as the URLs themselves can't be used as a key due to various limitations in the configuration file parser.

Finally, the relative URLs introduced in [http://subversion.tigris.org/svn_1.5_releasenotes.html#externals Subversion 1.5] are not yet supported.

----
See also: TracGuide, TracAdmin, TracEnvironment
